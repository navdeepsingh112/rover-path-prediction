import { forwardRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useCylinder } from '@react-three/cannon'

// useGLTF.preload('/Wheel.glb')

// Auto-generated by: https://github.com/pmndrs/gltfjsx
// const Wheel = forwardRef(({ radius = 0.7, leftSide, ...props }, ref) => {
//     const { nodes, materials } = useGLTF('/wheel.glb')
//     useCylinder(() => ({ mass: 1, type: 'Kinematic', material: 'wheel', collisionFilterGroup: 0, args: [radius, radius, 0.5, 16], ...props }), ref)
//     return (
//         <mesh ref={ref}>
//             <mesh rotation={[0, 0, ((leftSide ? 1 : -1) * Math.PI) / 2]}>
//                 <mesh material={materials.Rubber} geometry={nodes.wheel_1.geometry} />
//                 <mesh material={materials.Steel} geometry={nodes.wheel_2.geometry} />
//                 <mesh material={materials.Chrom} geometry={nodes.wheel_3.geometry} />
//             </mesh>
//         </mesh>
//     )
// })
import { Cylinder } from '@react-three/drei';
import { MeshStandardMaterial } from 'three';

const Wheel = forwardRef(({ radius = 0.7, leftSide, ...props }, ref) => {
    // Set up the physics for the cylinder
    const [, api] = useCylinder(() => ({
        mass: 1,
        type: 'Kinematic',
        material: 'wheel',
        collisionFilterGroup: 0,
        args: [radius, radius, 0.5, 16], // [topRadius, bottomRadius, height, radialSegments]
        ...props
    }), ref);

    // Calculate rotation for the wheel
    const rotationAngle = (leftSide ? 1 : -1) * Math.PI / 2;

    return (
        <Cylinder ref={ref} args={[radius, radius, 0.5, 16]} rotation={[0, 0, rotationAngle]} castShadow>
            <meshStandardMaterial attach="material" color="gray" />
            <meshStandardMaterial attach="material" color="black" />
        </Cylinder>
    );
});

export default Wheel
